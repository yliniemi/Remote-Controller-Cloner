unsigned int A_ON[] =
{
572, 2132, 1207, 377, 1132, 426, 1105, 442, 1095, 460, 
1081, 465, 309, 1219, 326, 1226, 318, 1208, 1096, 469, 
303, 1225, 322, 1214, 1091, 463, 311, 1221, 327, 1221, 
1082, 463, 1080, 472, 304, 1225, 1084, 467, 308, 1234, 
1077, 477, 1060, 480, 1065, 483, 293, 1238, 310, 1237, 
312, 2357, 1100, 463, 1078, 481, 1060, 474, 1069, 480, 
1061, 483, 293, 1234, 314, 1225, 319, 1219, 1086, 474, 
301, 1222, 325, 1217, 1088, 470, 306, 1232, 314, 1227, 
1080, 463, 1076, 477, 298, 1235, 1075, 482, 294, 1224, 
1087, 469, 1073, 472, 1069, 482, 294, 1229, 319, 1232, 
318, 2359, 1097, 457, 1083, 468, 1073, 481, 1062, 472, 
1071, 483, 293, 1238, 309, 1224, 320, 1225, 1080, 473, 
302, 1226, 321, 1220, 1088, 462, 312, 1227, 318, 1223, 
1084, 471, 1069, 472, 305, 1228, 1079, 469, 307, 1228, 
1084, 469, 1074, 476, 1065, 472, 304, 1239, 308, 1231, 
319, 2365, 1094, 462, 1077, 466, 1076, 474, 1067, 483, 
1061, 475, 299, 1236, 312, 1226, 318, 1223, 1083, 471, 
305, 1229, 317, 1222, 1084, 466, 309, 1225, 321, 1222, 
1083, 472, 1071, 474, 301, 1230, 1080, 470, 305, 1238, 
1072, 483, 1059, 475, 1067, 478, 301, 1232, 312, 1233, 
3006, 7282, 1022, 543, 991, 559, 980, 570, 973, 582, 
961, 599, 435, 1100, 447, 1097, 450, 1096, 963, 592, 
441, 1113, 435, 1099, 961, 589, 442, 1105, 443, 1110, 
949, 593, 953, 600, 435, 1119, 940, 597, 439, 1108, 
951, 601, 949, 606, 939, 601, 433, 1113, 436, 1118, 
2996, 7277, 1028, 543, 992, 556, 982, 568, 974, 583, 
963, 591, 441, 1104, 443, 1102, 444, 1092, 967, 593, 
441, 1108, 439, 1102, 956, 602, 432, 1098, 449, 1120, 
940, 602, 945, 602, 432, 1102, 958, 598, 436, 1099, 
962, 613, 933, 603, 947, 603, 429, 1109, 438, 1119, 
2996, 7276, 1030, 534, 999, 559, 981, 571, 971, 580, 
964, 595, 438, 1098, 449, 1102, 445, 1104, 953, 597, 
437, 1107, 441, 1115, 946, 585, 446, 1109, 441, 1097, 
960, 596, 951, 597, 437, 1105, 955, 602, 433, 1111, 
948, 606, 944, 597, 948, 605, 429, 1117, 433, 1121, 
2992, 7282, 1024, 534, 1002, 553, 983, 574, 970, 582, 
961, 589, 445, 1100, 446, 1104, 443, 1101, 958, 589, 
444, 1098, 449, 1101, 957, 601, 435, 1105, 443, 1095, 
967, 591, 951, 606, 429, 1112, 948, 597, 437, 1112, 
949, 606, 939, 604, 944, 604, 432, 1126, 422
};


unsigned int A_OFF[] =
{
546, 2182, 1188, 383, 1136, 430, 1109, 453, 1086, 461, 
1084, 466, 1080, 472, 1074, 490, 288, 1242, 309, 1222, 
1091, 483, 1062, 484, 294, 1235, 317, 1240, 1074, 473, 
304, 1235, 316, 1226, 1086, 474, 303, 1232, 1083, 472, 
1075, 490, 1057, 479, 1068, 486, 294, 1240, 312, 1233, 
321, 2363, 1104, 464, 1080, 471, 1076, 474, 1072, 487, 
1061, 481, 1067, 497, 1051, 488, 291, 1248, 304, 1236, 
1078, 484, 1062, 483, 298, 1242, 307, 1238, 1076, 476, 
301, 1238, 314, 1233, 1078, 485, 294, 1231, 1085, 472, 
1074, 481, 1065, 487, 1061, 496, 284, 1238, 314, 1238, 
316, 2372, 1095, 471, 1074, 472, 1073, 479, 1068, 497, 
1050, 481, 1066, 484, 1066, 487, 292, 1242, 310, 1230, 
1082, 479, 1069, 485, 293, 1236, 316, 1227, 1088, 473, 
303, 1233, 320, 1225, 1085, 482, 295, 1233, 1084, 472, 
1081, 472, 1069, 491, 1057, 490, 288, 1238, 315, 1243, 
311, 2374, 1092, 482, 1065, 476, 1069, 481, 1066, 480, 
1066, 490, 1059, 489, 1059, 498, 281, 1247, 307, 1234, 
1078, 483, 1065, 478, 300, 1244, 307, 1234, 1079, 489, 
288, 1231, 322, 1220, 1091, 476, 302, 1231, 1085, 472, 
1076, 485, 1061, 490, 1057, 496, 283, 1239, 313, 1242, 
3008, 7293, 1031, 547, 991, 560, 985, 582, 964, 585, 
967, 594, 954, 599, 951, 603, 434, 1116, 437, 1116, 
949, 602, 949, 602, 435, 1113, 440, 1108, 958, 603, 
435, 1115, 436, 1113, 952, 604, 434, 1111, 954, 601, 
950, 606, 947, 611, 941, 602, 435, 1117, 437, 1125, 
3000, 7297, 1030, 539, 999, 566, 979, 575, 972, 585, 
962, 593, 958, 607, 944, 609, 428, 1118, 434, 1111, 
954, 611, 942, 603, 433, 1116, 436, 1114, 952, 604, 
434, 1110, 441, 1109, 956, 604, 434, 1109, 956, 622, 
930, 604, 948, 609, 943, 606, 432, 1114, 437, 1125, 
3004, 7307, 1018, 542, 996, 561, 984, 575, 970, 594, 
956, 600, 950, 613, 937, 606, 431, 1112, 440, 1115, 
951, 600, 950, 605, 433, 1111, 442, 1110, 955, 602, 
435, 1106, 446, 1111, 954, 609, 429, 1117, 948, 605, 
946, 603, 951, 608, 942, 612, 426, 1116, 437, 1119, 
3008, 7312, 1012, 537, 1002, 560, 984, 576, 970, 596, 
954, 589, 958, 613, 940, 611, 426, 1114, 437, 1108, 
957, 600, 952, 608, 429, 1113, 440, 1118, 948, 603, 
434, 1105, 447, 1119, 945, 601, 437, 1109, 957, 604, 
948, 613, 937, 604, 948, 606, 432, 1118, 435
};


unsigned int B_ON[] =
{
548, 2157, 1184, 398, 1124, 416, 1114, 442, 1092, 448, 
1087, 456, 317, 1221, 322, 1218, 1086, 460, 1077, 470, 
303, 1223, 321, 1220, 322, 1218, 324, 1215, 325, 1213, 
1088, 454, 319, 1217, 1088, 462, 1077, 468, 1072, 473, 
300, 1233, 313, 1230, 1075, 474, 299, 1224, 1083, 469, 
310, 2366, 1094, 461, 1076, 462, 1077, 471, 1069, 474, 
1067, 485, 288, 1236, 310, 1223, 1082, 474, 1066, 480, 
293, 1226, 319, 1224, 319, 1214, 327, 1210, 332, 1210, 
1089, 466, 307, 1222, 1085, 463, 1076, 469, 1070, 476, 
298, 1237, 309, 1225, 1080, 467, 306, 1228, 1080, 485, 
293, 2367, 1093, 452, 1086, 460, 1078, 470, 1070, 476, 
1064, 472, 303, 1231, 314, 1220, 1085, 469, 1071, 478, 
296, 1231, 313, 1223, 321, 1216, 326, 1211, 328, 1217, 
1085, 460, 312, 1236, 1071, 462, 1077, 471, 1071, 471, 
300, 1233, 312, 1239, 1067, 464, 311, 1220, 1086, 475, 
305, 2371, 1088, 463, 1074, 462, 1079, 470, 1068, 487, 
1053, 480, 295, 1239, 307, 1223, 1082, 471, 1067, 474, 
302, 1224, 319, 1223, 320, 1225, 317, 1222, 319, 1208, 
1093, 458, 315, 1221, 1086, 473, 1065, 469, 1070, 475, 
298, 1235, 312, 1222, 1083, 460, 313, 1224, 1084, 470, 
2995, 7269, 1027, 537, 997, 554, 982, 570, 970, 584, 
958, 587, 444, 1095, 452, 1095, 960, 589, 955, 589, 
442, 1113, 433, 1108, 439, 1095, 448, 1096, 450, 1098, 
959, 583, 447, 1102, 956, 599, 945, 594, 951, 596, 
436, 1105, 441, 1106, 952, 596, 436, 1107, 952, 595, 
2999, 7270, 1026, 535, 998, 556, 981, 569, 970, 595, 
948, 587, 443, 1103, 442, 1098, 958, 587, 958, 594, 
437, 1104, 442, 1098, 448, 1102, 442, 1105, 440, 1095, 
962, 589, 442, 1097, 960, 590, 955, 599, 945, 600, 
433, 1111, 439, 1091, 963, 604, 428, 1112, 947, 599, 
2995, 7274, 1022, 532, 1000, 558, 980, 568, 972, 578, 
964, 591, 439, 1103, 442, 1096, 962, 588, 955, 601, 
431, 1099, 447, 1102, 443, 1098, 447, 1097, 449, 1095, 
962, 583, 448, 1112, 947, 591, 952, 597, 948, 599, 
433, 1112, 434, 1106, 953, 589, 443, 1101, 956, 600, 
2997, 7271, 1026, 530, 1002, 556, 981, 569, 971, 593, 
949, 584, 447, 1094, 451, 1095, 962, 592, 952, 600, 
431, 1100, 447, 1107, 438, 1104, 442, 1093, 452, 1088, 
969, 591, 440, 1102, 956, 600, 943, 598, 945, 606, 
427, 1104, 443, 1102, 956, 598, 434, 1111, 948
};


unsigned int B_OFF[] =
{
577, 2143, 1200, 370, 1137, 425, 1110, 445, 1091, 453, 
1088, 476, 1064, 477, 1067, 476, 1066, 477, 300, 1226, 
321, 1220, 1088, 469, 306, 1228, 1083, 473, 1070, 477, 
1066, 473, 303, 1231, 1080, 479, 1064, 478, 299, 1237, 
1075, 478, 298, 1240, 1073, 472, 302, 1234, 1077, 482, 
299, 2386, 1080, 464, 1077, 460, 1081, 482, 1062, 480, 
1062, 481, 1062, 502, 1042, 485, 1059, 488, 289, 1235, 
313, 1232, 1078, 468, 307, 1230, 1082, 468, 1074, 474, 
1070, 475, 301, 1239, 1073, 483, 1060, 477, 299, 1236, 
1076, 471, 305, 1244, 1069, 474, 301, 1237, 1076, 484, 
297, 2363, 1100, 463, 1078, 468, 1074, 478, 1062, 479, 
1068, 478, 1066, 494, 1049, 494, 1051, 478, 299, 1244, 
303, 1229, 1080, 469, 307, 1243, 1069, 469, 1074, 472, 
1072, 475, 300, 1245, 1068, 473, 1070, 479, 298, 1233, 
1079, 476, 302, 1245, 1065, 469, 306, 1232, 1081, 472, 
309, 2382, 1082, 457, 1084, 470, 1071, 475, 1067, 472, 
1073, 476, 1067, 488, 1056, 486, 1058, 497, 280, 1234, 
315, 1231, 1076, 478, 299, 1232, 1080, 471, 1072, 475, 
1068, 477, 298, 1248, 1066, 476, 1067, 474, 300, 1238, 
1076, 466, 308, 1233, 1081, 483, 293, 1236, 1076, 476, 
2997, 7285, 1022, 537, 1001, 556, 984, 571, 971, 579, 
965, 586, 960, 590, 957, 606, 941, 597, 438, 1108, 
440, 1119, 943, 597, 436, 1111, 952, 603, 943, 601, 
948, 604, 428, 1117, 946, 604, 944, 596, 439, 1118, 
944, 603, 431, 1105, 957, 601, 434, 1111, 950, 604, 
2998, 7286, 1023, 536, 999, 558, 983, 576, 966, 583, 
963, 584, 961, 594, 952, 599, 948, 601, 433, 1120, 
430, 1102, 959, 632, 401, 1110, 952, 601, 947, 601, 
946, 601, 433, 1115, 948, 602, 946, 597, 437, 1112, 
952, 605, 428, 1106, 956, 599, 434, 1112, 950, 603, 
3000, 7276, 1032, 539, 997, 575, 964, 571, 972, 589, 
956, 592, 954, 600, 947, 601, 946, 597, 437, 1108, 
442, 1115, 946, 594, 440, 1104, 958, 602, 944, 601, 
948, 601, 433, 1109, 954, 601, 946, 602, 433, 1110, 
952, 610, 425, 1108, 954, 601, 433, 1111, 952, 603, 
2998, 7284, 1026, 540, 994, 568, 974, 585, 957, 582, 
963, 593, 952, 602, 945, 596, 951, 598, 437, 1113, 
436, 1107, 955, 606, 426, 1105, 958, 597, 950, 601, 
945, 606, 430, 1109, 952, 603, 947, 599, 434, 1109, 
953, 602, 435, 1109, 952, 604, 429, 1109, 953
};


unsigned int C_ON[] =
{
538, 2171, 1180, 401, 1125, 425, 1109, 446, 1093, 452, 
1087, 469, 1072, 467, 1076, 487, 290, 1227, 321, 1218, 
1091, 466, 1075, 470, 306, 1233, 316, 1226, 1082, 471, 
305, 1234, 314, 1218, 1090, 465, 310, 1230, 1081, 481, 
1062, 474, 1071, 476, 1067, 481, 1065, 487, 290, 1244, 
310, 2368, 1093, 460, 1083, 469, 1074, 488, 1054, 482, 
1065, 484, 1058, 485, 1061, 484, 292, 1235, 314, 1235, 
1075, 475, 1069, 476, 303, 1238, 307, 1232, 1078, 471, 
305, 1225, 323, 1218, 1088, 469, 309, 1225, 1086, 473, 
1069, 485, 1059, 478, 1066, 477, 1071, 497, 277, 1247, 
309, 2367, 1095, 463, 1079, 468, 1074, 476, 1067, 485, 
1060, 487, 1058, 485, 1060, 487, 290, 1237, 312, 1231, 
1078, 469, 1077, 471, 306, 1238, 308, 1221, 1087, 481, 
295, 1233, 315, 1221, 1088, 470, 307, 1234, 1076, 474, 
1070, 488, 1055, 478, 1068, 479, 1062, 484, 295, 1246, 
308, 2377, 1087, 462, 1080, 470, 1073, 476, 1068, 475, 
1069, 483, 1062, 481, 1062, 488, 289, 1242, 308, 1242, 
1068, 477, 1068, 478, 297, 1238, 312, 1227, 1080, 479, 
297, 1226, 322, 1223, 1087, 468, 307, 1234, 1078, 474, 
1068, 473, 1071, 477, 1066, 480, 1065, 500, 277, 1242, 
3005, 7280, 1033, 535, 1000, 559, 982, 573, 970, 601, 
946, 590, 956, 599, 949, 608, 426, 1116, 434, 1103, 
958, 596, 952, 597, 438, 1108, 441, 1111, 951, 600, 
437, 1105, 442, 1102, 959, 591, 445, 1108, 953, 594, 
957, 611, 934, 611, 938, 610, 939, 613, 422, 1119, 
3002, 7278, 1032, 540, 997, 558, 984, 573, 970, 590, 
955, 587, 960, 606, 941, 599, 436, 1106, 444, 1102, 
959, 603, 945, 600, 434, 1113, 436, 1105, 957, 599, 
436, 1112, 437, 1098, 964, 593, 441, 1113, 950, 611, 
934, 601, 949, 610, 937, 608, 942, 612, 424, 1125, 
2994, 7289, 1024, 539, 996, 562, 978, 574, 969, 590, 
957, 592, 954, 593, 956, 599, 434, 1106, 444, 1106, 
954, 602, 948, 595, 439, 1108, 442, 1111, 951, 607, 
427, 1101, 448, 1108, 953, 602, 434, 1104, 958, 600, 
949, 616, 930, 606, 944, 611, 937, 613, 422, 1117, 
3003, 7287, 1024, 536, 1000, 556, 985, 572, 972, 580, 
965, 590, 956, 594, 954, 594, 441, 1106, 444, 1106, 
956, 598, 948, 615, 420, 1127, 423, 1104, 958, 596, 
438, 1105, 445, 1097, 964, 600, 434, 1107, 957, 600, 
945, 607, 943, 601, 947, 605, 945, 601, 434
};


unsigned int C_OFF[] =
{
578, 2116, 1204, 382, 1136, 423, 1110, 448, 1088, 451, 
1089, 461, 311, 1222, 323, 1210, 333, 1215, 1088, 463, 
310, 1225, 320, 1214, 1092, 461, 312, 1225, 320, 1216, 
1089, 461, 1080, 471, 304, 1218, 1090, 473, 301, 1232, 
1078, 477, 1064, 488, 1054, 475, 1067, 473, 301, 1243, 
311, 2363, 1096, 465, 1074, 471, 1069, 474, 1069, 483, 
1058, 480, 295, 1237, 312, 1225, 317, 1227, 1078, 468, 
307, 1223, 323, 1217, 1088, 464, 310, 1223, 322, 1217, 
1088, 463, 1078, 480, 293, 1231, 1081, 469, 304, 1229, 
1080, 470, 1071, 475, 1068, 483, 1057, 477, 299, 1239, 
314, 2377, 1082, 463, 1078, 469, 1071, 474, 1068, 476, 
1064, 476, 300, 1236, 311, 1217, 327, 1220, 1086, 468, 
307, 1228, 317, 1217, 1088, 472, 303, 1222, 322, 1223, 
1083, 462, 1078, 470, 305, 1229, 1081, 468, 306, 1232, 
1078, 470, 1071, 477, 1064, 475, 1068, 482, 293, 1253, 
299, 2361, 1100, 459, 1080, 461, 1080, 468, 1073, 471, 
1070, 479, 297, 1231, 316, 1224, 320, 1220, 1084, 466, 
310, 1234, 310, 1226, 1080, 461, 315, 1222, 321, 1217, 
1089, 468, 1072, 472, 302, 1228, 1083, 470, 304, 1228, 
1081, 470, 1072, 479, 1062, 473, 1069, 476, 299, 1243, 
2997, 7277, 1025, 537, 998, 553, 984, 571, 972, 582, 
960, 583, 449, 1093, 454, 1099, 446, 1096, 963, 587, 
445, 1096, 450, 1098, 961, 598, 435, 1108, 439, 1101, 
958, 592, 953, 588, 444, 1108, 953, 606, 426, 1112, 
949, 594, 951, 604, 943, 603, 943, 605, 429, 1118, 
2995, 7275, 1029, 532, 1001, 558, 982, 566, 974, 597, 
948, 587, 444, 1101, 446, 1105, 441, 1096, 962, 594, 
439, 1104, 442, 1101, 958, 596, 436, 1102, 445, 1102, 
956, 593, 953, 596, 437, 1107, 954, 609, 424, 1104, 
956, 604, 941, 598, 948, 620, 928, 599, 434, 1118, 
2996, 7274, 1030, 538, 995, 563, 975, 570, 972, 580, 
963, 589, 443, 1105, 441, 1097, 449, 1096, 964, 583, 
448, 1105, 442, 1096, 963, 590, 441, 1107, 441, 1096, 
963, 589, 956, 602, 430, 1103, 957, 596, 437, 1104, 
958, 593, 952, 594, 952, 601, 945, 603, 430, 1124, 
2990, 7274, 1030, 537, 998, 555, 984, 581, 958, 580, 
965, 586, 445, 1096, 450, 1101, 446, 1091, 967, 586, 
446, 1095, 452, 1097, 961, 589, 444, 1095, 451, 1102, 
957, 597, 949, 591, 440, 1103, 958, 601, 432, 1106, 
954, 604, 943, 604, 941, 602, 945, 600, 433
};


unsigned int D_ON[] =
{
579, 2128, 1194, 381, 1138, 422, 1111, 437, 1098, 459, 
1080, 474, 1066, 465, 1075, 487, 1054, 474, 301, 1229, 
316, 1230, 1079, 473, 299, 1226, 1083, 476, 1065, 474, 
1067, 478, 296, 1232, 1079, 473, 1068, 475, 300, 1235, 
1076, 471, 304, 1247, 1063, 472, 1068, 485, 1058, 482, 
298, 2372, 1091, 460, 1080, 474, 1066, 472, 1069, 474, 
1067, 488, 1056, 484, 1057, 486, 1057, 479, 296, 1239, 
308, 1226, 1083, 467, 305, 1233, 1079, 471, 1068, 481, 
1061, 483, 292, 1232, 1080, 471, 1070, 471, 304, 1232, 
1078, 470, 305, 1232, 1078, 468, 1072, 481, 1060, 485, 
297, 2370, 1095, 471, 1067, 471, 1070, 472, 1070, 481, 
1061, 486, 1056, 479, 1063, 488, 1056, 479, 296, 1250, 
297, 1224, 1084, 473, 301, 1234, 1077, 464, 1077, 476, 
1065, 475, 300, 1248, 1064, 488, 1052, 484, 292, 1243, 
1067, 472, 303, 1231, 1078, 477, 1066, 471, 1069, 477, 
304, 2371, 1093, 461, 1078, 468, 1074, 469, 1072, 484, 
1058, 482, 1059, 483, 1061, 483, 1059, 477, 297, 1247, 
303, 1222, 1084, 477, 296, 1236, 1075, 475, 1068, 473, 
1067, 480, 296, 1233, 1077, 480, 1061, 478, 297, 1229, 
1084, 471, 302, 1231, 1079, 471, 1070, 490, 1052, 483, 
2989, 7271, 1033, 541, 994, 563, 977, 568, 970, 583, 
960, 588, 957, 597, 948, 597, 950, 595, 438, 1107, 
440, 1103, 956, 599, 435, 1108, 951, 601, 947, 599, 
946, 594, 439, 1108, 953, 599, 947, 609, 423, 1110, 
951, 599, 435, 1105, 954, 598, 949, 598, 947, 611, 
2989, 7276, 1029, 537, 996, 558, 981, 573, 970, 576, 
966, 596, 947, 593, 953, 598, 947, 601, 433, 1111, 
437, 1102, 958, 602, 430, 1106, 955, 598, 947, 599, 
948, 599, 433, 1110, 950, 607, 940, 602, 432, 1109, 
951, 612, 421, 1105, 956, 596, 949, 599, 948, 604, 
2996, 7276, 1027, 536, 998, 553, 985, 575, 966, 581, 
967, 588, 953, 590, 954, 599, 948, 602, 431, 1107, 
440, 1104, 955, 598, 436, 1109, 949, 591, 956, 607, 
939, 604, 430, 1107, 954, 598, 947, 603, 431, 1109, 
951, 599, 435, 1111, 949, 599, 948, 599, 947, 604, 
2996, 7275, 1028, 534, 1001, 555, 983, 568, 974, 575, 
967, 583, 961, 594, 951, 593, 953, 606, 426, 1124, 
425, 1103, 958, 594, 438, 1104, 955, 599, 947, 612, 
935, 603, 430, 1116, 946, 594, 951, 605, 428, 1109, 
952, 595, 438, 1106, 955, 603, 942, 604, 942
};


unsigned int D_OFF[] =
{
575, 2143, 1200, 365, 1140, 422, 1108, 439, 1097, 452, 
1085, 467, 306, 1224, 322, 1214, 1091, 461, 1078, 472, 
304, 1227, 318, 1226, 316, 1221, 322, 1206, 336, 1215, 
1086, 468, 305, 1230, 1079, 462, 1077, 473, 1068, 473, 
302, 1234, 314, 1230, 1074, 474, 1067, 481, 1060, 480, 
301, 2371, 1091, 463, 1076, 465, 1075, 473, 1069, 480, 
1062, 491, 284, 1235, 310, 1219, 1089, 468, 1073, 472, 
303, 1230, 315, 1228, 315, 1212, 332, 1212, 328, 1212, 
1090, 461, 315, 1228, 1079, 471, 1069, 473, 1068, 473, 
302, 1238, 308, 1221, 1087, 468, 1072, 475, 1065, 480, 
301, 2381, 1083, 458, 1082, 468, 1071, 484, 1060, 476, 
1063, 484, 292, 1248, 299, 1224, 1082, 469, 1073, 474, 
301, 1236, 310, 1222, 322, 1220, 323, 1218, 322, 1210, 
1093, 473, 301, 1215, 1094, 466, 1074, 481, 1059, 478, 
296, 1236, 312, 1225, 1082, 467, 1073, 475, 1066, 482, 
299, 2371, 1093, 465, 1073, 491, 1050, 478, 1064, 481, 
1060, 484, 292, 1245, 301, 1233, 1075, 466, 1074, 474, 
301, 1234, 312, 1217, 326, 1213, 330, 1215, 327, 1212, 
1092, 460, 312, 1235, 1074, 474, 1066, 478, 1064, 474, 
300, 1229, 317, 1230, 1076, 466, 1077, 475, 1065, 483, 
2989, 7275, 1028, 542, 993, 557, 981, 570, 972, 582, 
960, 589, 444, 1100, 447, 1097, 960, 591, 955, 594, 
438, 1115, 432, 1099, 448, 1103, 443, 1096, 450, 1099, 
959, 590, 442, 1105, 956, 589, 954, 601, 945, 614, 
419, 1110, 438, 1102, 958, 595, 949, 604, 944, 613, 
2985, 7281, 1023, 535, 998, 561, 978, 575, 966, 580, 
964, 589, 442, 1101, 445, 1107, 952, 594, 951, 601, 
431, 1108, 440, 1098, 447, 1104, 443, 1103, 443, 1098, 
960, 599, 434, 1103, 956, 596, 950, 592, 953, 599, 
433, 1107, 441, 1105, 955, 603, 943, 601, 944, 608, 
2992, 7273, 1030, 539, 996, 558, 978, 575, 968, 582, 
960, 587, 446, 1099, 447, 1101, 958, 592, 953, 600, 
432, 1103, 444, 1110, 438, 1098, 447, 1101, 446, 1101, 
957, 592, 441, 1103, 956, 606, 939, 604, 942, 606, 
427, 1106, 441, 1117, 943, 614, 931, 601, 947, 604, 
2995, 7274, 1030, 532, 1000, 574, 966, 576, 964, 589, 
956, 594, 437, 1094, 453, 1096, 963, 593, 952, 602, 
430, 1110, 438, 1103, 443, 1100, 447, 1103, 442, 1101, 
958, 596, 437, 1108, 951, 599, 947, 596, 949, 597, 
437, 1108, 440, 1106, 955, 597, 948, 606, 939
};


unsigned int ALL_ON[] =
{
578, 2129, 1194, 386, 1134, 424, 1109, 446, 1091, 458, 
315, 1213, 1094, 474, 300, 1219, 327, 1220, 323, 1207, 
334, 1214, 329, 1200, 341, 1205, 336, 1209, 332, 1204, 
337, 1203, 1098, 464, 1076, 472, 302, 1231, 317, 1221, 
321, 1212, 332, 1207, 335, 1211, 1094, 462, 310, 1231, 
320, 2360, 1098, 454, 1085, 470, 1071, 476, 1065, 481, 
293, 1232, 1080, 471, 304, 1244, 303, 1225, 319, 1217, 
326, 1219, 324, 1207, 336, 1217, 323, 1206, 338, 1213, 
327, 1210, 1091, 457, 1084, 465, 310, 1231, 316, 1222, 
321, 1226, 317, 1212, 331, 1209, 1093, 467, 307, 1229, 
324, 2357, 1100, 449, 1091, 470, 1070, 481, 1060, 471, 
304, 1231, 1080, 475, 300, 1229, 318, 1222, 322, 1218, 
325, 1214, 329, 1217, 325, 1209, 333, 1206, 335, 1203, 
341, 1207, 1094, 463, 1076, 473, 303, 1224, 321, 1219, 
327, 1219, 322, 1213, 329, 1217, 1086, 473, 302, 1225, 
326, 2357, 1101, 470, 1070, 472, 1069, 470, 1072, 468, 
306, 1230, 1081, 474, 302, 1227, 319, 1221, 323, 1213, 
330, 1215, 328, 1220, 323, 1210, 331, 1208, 333, 1211, 
333, 1202, 1098, 459, 1082, 469, 306, 1225, 321, 1221, 
322, 1210, 333, 1224, 319, 1205, 1097, 462, 312, 1240, 
2997, 7273, 1031, 531, 1003, 555, 983, 565, 978, 584, 
446, 1095, 964, 587, 446, 1102, 445, 1097, 449, 1100, 
447, 1092, 454, 1095, 452, 1103, 443, 1100, 447, 1094, 
451, 1096, 963, 598, 947, 594, 439, 1107, 441, 1102, 
445, 1099, 448, 1097, 450, 1091, 967, 601, 433, 1108, 
3003, 7287, 1017, 538, 997, 554, 985, 572, 970, 578, 
453, 1098, 961, 590, 442, 1099, 447, 1090, 457, 1095, 
452, 1092, 454, 1097, 450, 1096, 450, 1097, 448, 1091, 
457, 1093, 965, 590, 955, 603, 430, 1102, 445, 1098, 
450, 1107, 440, 1096, 451, 1099, 960, 601, 432, 1109, 
3004, 7283, 1022, 543, 990, 563, 975, 571, 971, 577, 
455, 1091, 968, 599, 433, 1109, 438, 1092, 454, 1096, 
451, 1100, 445, 1100, 448, 1094, 452, 1106, 441, 1092, 
453, 1105, 954, 587, 960, 594, 437, 1102, 447, 1107, 
440, 1102, 445, 1095, 453, 1101, 957, 592, 441, 1100, 
3012, 7272, 1033, 534, 1000, 556, 983, 574, 968, 576, 
456, 1091, 966, 593, 440, 1098, 449, 1095, 452, 1097, 
449, 1100, 447, 1094, 453, 1095, 451, 1099, 447, 1103, 
444, 1092, 967, 589, 955, 594, 439, 1105, 443, 1107, 
440, 1102, 445, 1101, 446, 1094, 966, 587, 445
};


unsigned int ALL_OFF[] =
{
584, 2135, 1189, 383, 1137, 423, 1109, 443, 1095, 464, 
308, 1220, 325, 1209, 333, 1208, 334, 1204, 1098, 461, 
313, 1220, 1088, 462, 310, 1234, 313, 1217, 326, 1210, 
334, 1208, 332, 1211, 331, 1207, 334, 1207, 335, 1201, 
1100, 458, 318, 1222, 321, 1216, 1090, 464, 309, 1227, 
325, 2367, 1092, 455, 1084, 466, 1074, 469, 1072, 478, 
298, 1233, 314, 1224, 321, 1217, 326, 1217, 1086, 465, 
311, 1230, 1078, 463, 311, 1229, 317, 1214, 329, 1215, 
327, 1214, 327, 1212, 331, 1202, 339, 1215, 326, 1204, 
1096, 460, 315, 1222, 322, 1216, 1090, 463, 311, 1235, 
315, 2355, 1103, 456, 1082, 471, 1069, 467, 1074, 470, 
306, 1227, 318, 1225, 320, 1221, 323, 1215, 1087, 461, 
312, 1222, 1088, 472, 300, 1227, 320, 1223, 320, 1218, 
324, 1215, 328, 1205, 336, 1205, 338, 1207, 332, 1210, 
1092, 459, 314, 1214, 331, 1217, 1088, 463, 311, 1230, 
321, 2364, 1092, 456, 1084, 456, 1083, 466, 1076, 470, 
304, 1231, 316, 1222, 321, 1219, 324, 1235, 1070, 463, 
311, 1232, 1077, 469, 304, 1222, 324, 1217, 326, 1219, 
323, 1213, 329, 1212, 330, 1203, 338, 1209, 332, 1208, 
1093, 464, 310, 1230, 315, 1216, 1089, 459, 315, 1230, 
3006, 7274, 1028, 541, 992, 558, 981, 567, 974, 578, 
454, 1105, 440, 1093, 453, 1089, 456, 1093, 966, 602, 
429, 1096, 963, 594, 439, 1111, 436, 1094, 451, 1100, 
447, 1095, 451, 1100, 446, 1094, 452, 1095, 451, 1099, 
959, 587, 445, 1107, 440, 1093, 966, 599, 432, 1103, 
3013, 7275, 1023, 528, 1006, 557, 982, 572, 969, 578, 
452, 1090, 456, 1092, 454, 1091, 454, 1101, 958, 595, 
437, 1096, 963, 591, 441, 1102, 445, 1101, 445, 1098, 
448, 1104, 443, 1102, 444, 1097, 448, 1106, 441, 1097, 
961, 587, 445, 1096, 451, 1099, 960, 589, 444, 1105, 
3004, 7272, 1031, 533, 1001, 551, 987, 575, 968, 577, 
452, 1095, 452, 1100, 444, 1097, 449, 1092, 967, 583, 
448, 1100, 960, 588, 443, 1103, 445, 1110, 436, 1098, 
448, 1101, 445, 1098, 448, 1093, 452, 1100, 447, 1093, 
965, 588, 445, 1098, 447, 1095, 964, 589, 443, 1113, 
2999, 7264, 1037, 538, 995, 557, 981, 577, 966, 580, 
450, 1097, 450, 1089, 456, 1089, 455, 1089, 968, 590, 
443, 1098, 961, 591, 442, 1103, 443, 1101, 446, 1098, 
448, 1100, 447, 1096, 451, 1096, 448, 1103, 443, 1101, 
958, 590, 442, 1103, 443, 1107, 951, 592, 440
};


int delayArray[1024];
int statusArray[1024];

#define SIGNAL_LENGTH 400
#define INPUT_PIN 15
#define OUTPUT_PIN 13
#define PROCESSING_DELAY 2   // this is how much extra microsenconds it takes to process if statement and delay. you could put any random number here since I do previousMicros = previousMicros + array[i] instead of previousMicros = micros()
#define DELAY_BEFORE_MESSAGE 10000


class Transmitter
{
  public:
  int outputPin;
  int restingState;
  Transmitter(int setPin, int setRestingState)
  {
    outputPin = setPin;
    restingState = setRestingState;
    pinMode(outputPin, OUTPUT);
    digitalWrite(outputPin, restingState);
  }
  /*void Trasmitter(int setPin)
  {
    Trasmitter(setPin, 0);
  }*/
  void sendRaw(unsigned int *array, int length, int restingState)
  {
    unsigned long int previousMicros = micros();
    unsigned long int newWrite;
    unsigned long int previousWrite;
    unsigned long int delayMicros;
    
    // these lines are here to make the timing as precice as possible
    int pinStatus = restingState;
    digitalWrite(OUTPUT_PIN, pinStatus);
    newWrite = micros();
    previousWrite = newWrite;
    delayMicros = previousMicros + DELAY_BEFORE_MESSAGE - micros() - PROCESSING_DELAY;
    if (delayMicros < 10000000)
    {
      delayMicroseconds(delayMicros);
    }
    previousMicros = previousMicros + DELAY_BEFORE_MESSAGE;
    
    // Now we start sending the actual message
    for (int i = 0; i < length - 1; i++)
    {
      pinStatus = !pinStatus;
      digitalWrite(OUTPUT_PIN, pinStatus);
      newWrite = micros();
      delayArray[i] = newWrite - previousWrite;
      previousWrite = newWrite;
      delayMicros = previousMicros + array[i] - micros() - PROCESSING_DELAY;
      if (delayMicros < 10000000)
      {
        delayMicroseconds(delayMicros);
      }
      statusArray[i] = pinStatus;
      //previousMicros = micros();
      previousMicros = previousMicros + array[i];
    }
    pinStatus = restingState;
    digitalWrite(OUTPUT_PIN, pinStatus);
    delay(20);
    Serial.println("Sent some data over the radio waves");
    int biggestDelta = 0;
    int biggestDeltaLine = 0;
    for (int i = 2; i < length -1; i++)
    {
      Serial.println(String("Line: ") + i + ", Delay was: " + delayArray[i] + ", it should have been: " + array[i - 1] + ", error: " + abs(delayArray[i] - array[i - 1]));
      if (abs(delayArray[i] - array[i - 1]) > biggestDelta)
      {
        biggestDelta = abs(delayArray[i] - array[i - 1]);
        biggestDeltaLine = i;
      }
    }
    Serial.println(String("The biggest timing error was: ") + biggestDelta + " on line " + biggestDeltaLine);
  }
  
  void sendRaw(unsigned int *array, int length)
  {
    sendRaw(array, length, 0);
  }
};

Transmitter transmitter(OUTPUT_PIN, 0);

void setup()
{
  Serial.begin(115200);
  delay(5000);
}


void loop()
{
  Serial.println();
  Serial.println("Type your thing here: ");
  String answer = String("asdfghjklö");
  while(!Serial.available());
  {
     answer = Serial.readString();
     if (answer.length() > 0)  answer.remove(answer.length() - 1);
     Serial.println(String("You wrote: ") + answer);
  }
  if (answer.equals("A_ON")) transmitter.sendRaw(A_ON, SIGNAL_LENGTH);
  if (answer.equals("A_OFF")) transmitter.sendRaw(A_OFF, SIGNAL_LENGTH);
  if (answer.equals("B_ON")) transmitter.sendRaw(B_ON, SIGNAL_LENGTH);
  if (answer.equals("B_OFF")) transmitter.sendRaw(B_OFF, SIGNAL_LENGTH);
  if (answer.equals("C_ON")) transmitter.sendRaw(C_ON, SIGNAL_LENGTH);
  if (answer.equals("C_OFF")) transmitter.sendRaw(C_OFF, SIGNAL_LENGTH);
  if (answer.equals("D_ON")) transmitter.sendRaw(D_ON, SIGNAL_LENGTH);
  if (answer.equals("D_OFF")) transmitter.sendRaw(D_OFF, SIGNAL_LENGTH);
  if (answer.equals("ALL_ON")) transmitter.sendRaw(ALL_ON, SIGNAL_LENGTH);
  if (answer.equals("ALL_OFF")) transmitter.sendRaw(ALL_OFF, SIGNAL_LENGTH);
}
